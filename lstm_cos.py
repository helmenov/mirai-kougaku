# -*- coding: utf-8 -*-
"""LSTM-cos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UfJXGgpFUawe0Wa--_bd-tSvOHT8Ln0v

# Data generation
"""

!pip install numpy==1.18.2
import numpy as np

x=np.linspace(0,10.0*np.pi,num=500)
ampl=0.1
f=np.vectorize(np.cos)(x)+(ampl*np.random.normal(size=len(x)))
f=np.array(f,dtype='float32')

"""# Data set generated by sliding window"""

from more_itertools import windowed

w=50 #window size
input=np.array(list(windowed(f,w)))[:-1].reshape(len(f)-w,w,1)
output=f[w:].reshape(len(f)-w,1)
input_train=input[:110]
output_train=output[:110]

"""# Learning"""

!pip install tensorflow==2.2.0rc3
import tensorflow as tf
from tensorflow.keras.models import Sequential

from tensorflow.keras.layers import LSTM,Dense,Activation

from tensorflow.keras.optimizers import Adam 
from tensorflow.keras.callbacks import EarlyStopping

model = Sequential()
model.add(LSTM(100))
model.add(Dense(1))
model.add(Activation("linear"))

model.compile(loss="mean_squared_error", optimizer=Adam(lr=0.001))
early_stopping = EarlyStopping(monitor = 'val_loss', mode = 'auto', patience =40)

model.fit(input_train,output_train, batch_size=200, epochs=500, validation_split=0.1, callbacks =[early_stopping])

"""# Prediction and Visualization"""

predicted = model.predict(input)

!pip install matplotlib==3.2.1
import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plt.plot(x[w:],predicted, color="r", label="predict_data")
plt.scatter(x, f, color="b", label="raw_data",s=10)
plt.plot(x,np.vectorize(np.cos)(x), color="orange", label="cos")
plt.plot(x,np.vectorize(np.cos)(x)+ampl*1.96*np.ones(len(x)),color="orange", label="cos+normal_97.5%")
plt.plot(x,np.vectorize(np.cos)(x)+ampl*(-1.96)*np.ones(len(x)),color="orange", label="cos+normal_2.5%")
plt.legend()
plt.show()